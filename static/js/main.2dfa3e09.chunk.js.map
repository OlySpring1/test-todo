{"version":3,"sources":["store/todos.ts","store/index.ts","component/Todo/Todo.tsx","component/TodoList/TodoList.tsx","component/Search/Search.tsx","App.tsx","index.tsx"],"names":["initialState","todos","action","type","id","uuidv4","text","completed","map","todo","filter","rootReducer","combineReducers","getTodos","state","store","createStore","composeWithDevTools","Todo","dispatch","useDispatch","useState","isToggle","setIsToggle","onClick","TodoList","useSelector","key","Search","className","placeholder","value","App","titleTask","setTitleTask","setTitleTaskWithDebounce","useCallback","debounce","actualQuery","onChange","e","target","ReactDOM","render","document","getElementById"],"mappings":"8TAmCMA,EAAuB,GAwBdC,EAtBD,WAAmD,IAAlDA,EAAiD,uDAAzCD,EAAcE,EAA2B,uCAC9D,OAAQA,EAAOC,MACb,IAAK,WACH,MAAM,GAAN,mBACKF,GADL,CAEE,CACEG,GAAIC,eACJC,KAAMJ,EAAOI,KACbC,WAAW,KAGjB,IAAK,cACH,OAAON,EAAMO,KAAI,SAAAC,GAAI,OACnBA,EAAKL,KAAOF,EAAOE,GAAnB,2BAA6BK,GAA7B,IAAmCF,WAAYE,EAAKF,YAAcE,KAEtE,IAAK,cACH,OAAOR,EAAMS,QAAO,SAAAD,GAAI,OAAIA,EAAKL,KAAOF,EAAOE,MACjD,QACE,OAAOH,I,wCClDPU,EAAcC,0BAAgB,CAClCX,UAKWY,EAAW,SAACC,GAAD,OAAsBA,EAAMb,OAOrCc,EALDC,sBACZL,EACAM,iCCuBaC,G,MA7BmB,SAAC,GAAc,IAAZT,EAAW,EAAXA,KAC7BU,EAAWC,cAD6B,EAEdC,oBAAS,GAFK,mBAEvCC,EAFuC,KAE7BC,EAF6B,KAQ9C,OACE,4BACE,4BACEpB,KAAK,SACLqB,QATe,WACnBL,EFFuC,CACzChB,KAAM,cACNC,GEAsBK,EAAKL,KACzBmB,GAAaD,KASRb,EAAKH,MAEPgB,GACO,4BACAnB,KAAK,SACLqB,QAAS,kBAAML,EFZc,CACzChB,KAbkB,cAclBC,GEU+CK,EAAKL,OAFxC,aCNCqB,EAdE,WACjB,IAAMxB,EAAQyB,YAAYb,GAE1B,OACE,4BAEGZ,EAAMO,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,CAAMkB,IAAKlB,EAAKL,GAAIK,KAAMA,SCKjBmB,G,MAfA,WAAO,IAAD,EACKP,mBAAS,IADd,mBACZf,EADY,UAGrB,OACE,4BAAQuB,UAAU,UAChB,qCACA,2BACEA,UAAU,WACVC,YAAY,yBACZC,MAAOzB,OCqCE0B,EAzCH,WACV,IAAMb,EAAWC,cADD,EAEkBC,mBAAS,IAF3B,mBAETY,EAFS,KAEEC,EAFF,KAIVC,EAA2BC,sBAC/BC,KAAS,SAACC,GAAD,OAAyBnB,ELPI,CACxChB,KAAM,WACNG,KKKqDgC,MAAe,KAAM,IAY1E,OACE,yBAAKT,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACE,4BAAQA,UAAU,UAChB,2BACEA,UAAU,WACVC,YAAY,yBACZC,MAAOE,EACPM,SAlBa,SAACC,GAA0C,IACxDT,EAAUS,EAAEC,OAAZV,MACRG,EAAaH,MAkBP,4BACE5B,KAAK,SACLqB,QAjBY,WACpBW,EAAyBF,GACzBC,EAAa,MAaP,eC9BVQ,IAASC,OACP,kBAAC,IAAD,CAAU5B,MAAOA,GACf,kBAAC,EAAD,OAEF6B,SAASC,eAAe,W","file":"static/js/main.2dfa3e09.chunk.js","sourcesContent":["import { Action } from 'redux';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nconst ADD_TODO = 'ADD_TODO';\r\nconst TOGGLE_TODO = 'TOGGLE_TODO';\r\nconst REMOVE_TODO = 'REMOVE_TODO';\r\n\r\nexport const addTodo = (text: string) => ({\r\n  type: 'ADD_TODO',\r\n  text,\r\n})\r\n\r\nexport const toggleTodo = (id: string) => ({\r\n  type: 'TOGGLE_TODO',\r\n  id,\r\n})\r\n\r\nexport const removeTodo = (id: string) => ({\r\n  type: REMOVE_TODO,\r\n  id,\r\n})\r\n\r\ntype addTodo = Action<typeof ADD_TODO> & {\r\n  text: string;\r\n};\r\n\r\ntype toggleTodo = Action<typeof TOGGLE_TODO> & {\r\n  id: string;\r\n};\r\n\r\ntype removeTodo = Action<typeof REMOVE_TODO> & {\r\n  id: string;\r\n};\r\n\r\ntype AllowedActions = addTodo | toggleTodo | removeTodo;\r\n\r\nconst initialState: Todo[] = [];\r\n\r\nconst todos = (todos = initialState, action: AllowedActions) => {\r\n  switch (action.type) {\r\n    case 'ADD_TODO':\r\n      return [\r\n        ...todos,\r\n        {\r\n          id: uuidv4(),\r\n          text: action.text,\r\n          completed: false\r\n        }\r\n      ]\r\n    case 'TOGGLE_TODO':\r\n      return todos.map(todo => (\r\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n      ))\r\n    case 'REMOVE_TODO':\r\n      return todos.filter(todo => todo.id !== action.id)\r\n    default:\r\n      return todos\r\n  }\r\n}\r\n\r\nexport default todos;","import {\r\n  createStore, combineReducers, applyMiddleware, AnyAction,\r\n} from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport todos from './todos';\r\nconst rootReducer = combineReducers({\r\n  todos\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport const getTodos = (state: RootState) => state.todos;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(),\r\n);\r\n\r\nexport default store;\r\n","import React, { useState } from 'react';\r\nimport './Todo.scss';\r\nimport { useDispatch } from 'react-redux';\r\nimport { removeTodo, toggleTodo } from '../../store/todos';\r\n\r\ntype PropsTodo = {\r\n  todo: Todo\r\n}\r\n\r\nconst Todo: React.FC<PropsTodo> = ({ todo }) => {\r\n  const dispatch = useDispatch();\r\n  const [isToggle, setIsToggle] = useState(false);\r\n  const changeStatus = () => {\r\n    dispatch(toggleTodo(todo.id));\r\n    setIsToggle(!isToggle);\r\n\r\n  }\r\n  return (\r\n    <li>\r\n      <button\r\n        type=\"button\"\r\n        onClick={changeStatus}\r\n      >\r\n        {todo.text}\r\n      </button>\r\n      {isToggle && (\r\n              <button\r\n              type=\"button\"\r\n              onClick={() => dispatch(removeTodo(todo.id))}\r\n            >\r\n              Delete\r\n            </button>\r\n      \r\n      )}\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\nimport './TodoList.scss';\r\nimport { useSelector } from 'react-redux';\r\nimport { getTodos } from '../../store';\r\nimport Todo from '../Todo/Todo';\r\n\r\nconst TodoList = () => {\r\nconst todos = useSelector(getTodos);\r\n\r\nreturn (\r\n  <ul>\r\n    \r\n    {todos.map((todo: Todo) => (\r\n      <Todo key={todo.id} todo={todo}/>\r\n    ))} \r\n    \r\n  </ul>\r\n)\r\n  }\r\n\r\nexport default TodoList;","import React, { useState } from 'react';\r\nimport './Search.scss';\r\n\r\nconst Search = () => {\r\n  const [text, setText] = useState('');\r\n\r\nreturn (\r\n  <header className=\"header\">\r\n    <h1>todos</h1>\r\n    <input\r\n      className=\"new-todo\"\r\n      placeholder=\"What needs to be done?\"\r\n      value={text}\r\n    />\r\n\r\n  </header>\r\n)\r\n}\r\nexport default Search;","import React, { useState, useCallback } from 'react';\nimport './App.scss';\nimport { useDispatch } from 'react-redux';\nimport { addTodo } from './store/todos';\nimport debounce from 'lodash.debounce';\nimport TodoList from './component/TodoList/TodoList';\nimport Search from './component/Search/Search';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const [titleTask, setTitleTask] = useState('');\n  \n  const setTitleTaskWithDebounce = useCallback(\n    debounce((actualQuery: string) => dispatch(addTodo(actualQuery)), 500), []\n  );\n\n  const handleOnChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const { value } = e.target as HTMLInputElement;\n    setTitleTask(value);\n  };\n\n  const handleOnClick = () => {\n    setTitleTaskWithDebounce(titleTask);\n    setTitleTask('');\n  }\n  return (\n    <div className=\"todo\">\n      <Search />\n      <TodoList />\n        <footer className=\"footer\">\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={titleTask}\n            onChange={handleOnChange}\n          />\n          <button \n            type=\"button\"\n            onClick={handleOnClick}\n          >\n          Add Task\n          </button>\n        </footer>\n      \n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}